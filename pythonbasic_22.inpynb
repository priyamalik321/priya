{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c62eb036",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iNeuron\n"
     ]
    }
   ],
   "source": [
    "X = 'iNeuron'\n",
    "def func():\n",
    "    print(X)\n",
    "\n",
    "func()\n",
    "\n",
    "# in this code first we give value to variable x ,that is'ineuron'.\n",
    "# then we call def function (def func():).\n",
    "# then print x , and as we have 'ineuron' value of x , so when we again call the func(), it will give value of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "8692866e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iNeuron\n"
     ]
    }
   ],
   "source": [
    "X ='iNeuron'\n",
    "def func():\n",
    "    X='NL!'\n",
    "    \n",
    "func()    \n",
    "print(X)\n",
    "\n",
    "# when we call func() with print(X),then we get 'iNeuron' because as we saw in code func() there is no print statement to print x='NL',or not any change in global value that's why it take 'iNeuron as value to print.'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "be0d35c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iNeuron\n",
      "iNeuron\n"
     ]
    }
   ],
   "source": [
    "     X = 'iNeuron'\n",
    "     def func():\n",
    "        X = 'NIL'\n",
    "print(X)\n",
    "\n",
    "func()\n",
    "print(X)\n",
    "# in this question also there is no print statement or no change in global value to print x='NL'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "5b68a696",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iNeuron\n",
      "NI\n"
     ]
    }
   ],
   "source": [
    " X = 'iNeuron'\n",
    "def func():\n",
    "    global X\n",
    "    X = 'NI'\n",
    "print(X)\n",
    "\n",
    " func()\n",
    "print(X)\n",
    "# when we call func(), it will print 'iNeuron' because (X) having its value 'iNeuron'.\n",
    "# when we call print(x), it will print 'NI', because in code we have change value of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "025ff9c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iNeuron\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'iNeuron'"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "      X = 'iNeuron'\n",
    "def func():\n",
    "    X = 'NI'\n",
    "    \n",
    "def nested():\n",
    "    print(X)\n",
    "nested()\n",
    "func() \n",
    "      X\n",
    "    #when we call nested(), it will print 'iNeuron',because we have no other value like'NI'(which is not complete itself with print).\n",
    "    #when we call func(),again 'iNeuron' will print because function having only one specific value 'iNeuron'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "cde66756",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1409507759.py, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[151], line 7\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(X)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "     def func():\n",
    "    X = 'NI'\n",
    "     def nested():\n",
    "    nonlocal X\n",
    "X = 'Spam'\n",
    "nested()\n",
    "   print(X)\n",
    "\n",
    "     func()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4276612a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
