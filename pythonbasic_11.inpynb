{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5087d0ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-23\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "less than 10",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m spam\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m())\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m spam\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m,(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mless than 10\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mAssertionError\u001b[0m: less than 10"
     ]
    }
   ],
   "source": [
    "# Answer1\n",
    "spam= int(input())\n",
    "assert spam>=10,(\"less than 10\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bdfd578c",
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "both are not containing same string",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m eggs\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhello\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m      2\u001b[0m bacon\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhello\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m eggs\u001b[38;5;241m.\u001b[39mlower()\u001b[38;5;241m!=\u001b[39mbacon\u001b[38;5;241m.\u001b[39mlower(),\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mboth are not containing same string\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mAssertionError\u001b[0m: both are not containing same string"
     ]
    }
   ],
   "source": [
    "# answer 2\n",
    "eggs='hello'\n",
    "bacon=\"hello\"\n",
    "assert eggs.lower()!=bacon.lower(),\"both are not containing same string\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ec8bc8aa",
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "this is not true",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m ,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mthis is not true\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mAssertionError\u001b[0m: this is not true"
     ]
    }
   ],
   "source": [
    "#answer3\n",
    "assert False ,\"this is not true\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "847655e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer4\n",
    "logging.basicConfig(level=logging.DEBUG, format=' %(acstime)s% (message)s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b53d2995",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Answer5\n",
    "logging.basicConfig(filename=\"programmlog.txt\",level=logging.DEBUG,format='%(acstime)s% (message)s')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78d744eb",
   "metadata": {},
   "source": [
    "answer6\n",
    "five level of logging:\n",
    "    (i)logging.info\n",
    "    (ii)logging.error\n",
    "    (iii)logging.warning\n",
    "    (iv)logging.debug\n",
    "    (v)logging.critical"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9158c09",
   "metadata": {},
   "source": [
    "Answer7\n",
    "logging.disabe(logging.critical)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd763b7d",
   "metadata": {},
   "source": [
    "Answer8\n",
    "logging() is better than print()because in logging we can able to read our log any time and can disable by logging.debug.\n",
    "If we use print()it takes our more time ,even logging give attractive response as compared to print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3e2da14",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "aeeee218",
   "metadata": {},
   "source": [
    "Answer10\n",
    "If you click continue then debugger stop when we call break point."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44004c32",
   "metadata": {},
   "source": [
    "Answer11\n",
    "\n",
    "break point means if we use break in code then our complete code function will stop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0268130d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
