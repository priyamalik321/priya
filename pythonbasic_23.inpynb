{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8699a61c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 8\n"
     ]
    }
   ],
   "source": [
    "def func(a, b=6, c=8):\n",
    "    print(a ,b, c)\n",
    "func( 1,2)\n",
    "# when when call func(1,2),it give 1,2,8 because value become change now a is 1, b is 2 and c is 8 (c is 8 because we haven't give another value to c in func())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f5447b8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "def func(a, b, c=5):\n",
    "    print(a, b, c)\n",
    "func(1, c=3, b=2)\n",
    "# there we give new value a is 1, b is 2 and c is 3 , func()give new values because it will take values from func()call"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7e160601",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 (2, 3)\n"
     ]
    }
   ],
   "source": [
    "def func(a, *pargs):\n",
    "    print(a, pargs)\n",
    "func(1, 2, 3)\n",
    "# in this a is 1 and pargs is(2,3) because first value is always a and reamning values come in pargs (*pargs (*)it can contain no of values)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "82b329c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 {'c': 3, 'b': 2}\n"
     ]
    }
   ],
   "source": [
    "def func(a, **kargs):\n",
    "    print(a, kargs)\n",
    "func(a=1, c=3, b=2)\n",
    "# a is 1 and kargs is {'c': 3, 'b': 2} because **kargs always give result in dict format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "82dbbb42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 5 6 5\n"
     ]
    }
   ],
   "source": [
    "def func(a, b, c=8, d=5):\n",
    "    print(a, b, c, d)\n",
    "func(1, *(5, 6))\n",
    "# there a is 1 ,b is 5,c is 6and d is 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d1b26f32",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, ['x'], {'a': 'y'})"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def func(a, b, c): a = 2; b[0] = 'x'; c['a'] = 'y'\n",
    "l=1; m=[1]; n={'a':0}\n",
    "func(l, m, n)\n",
    "\n",
    "l, m, n\n",
    "# there l is 1 because we give new value in func call.\n",
    "# m is 'x ' ecause according to index [1] is x.\n",
    "# n is {'a': 'y'} because in index 2 value of a is change to 'y'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e29185e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
